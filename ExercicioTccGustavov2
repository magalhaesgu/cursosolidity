/*
SPDX-License-Identifier: CC-BY-4.0
(c) Desenvolvido por Gustavo Magalhaes
This work is licensed under a Creative Commons Attribution 4.0 International License.
*/

pragma solidity 0.8.19;

import "https://github.com/jeffprestes/cursosolidity/blob/master/bradesco_token_aberto.sol";

// Contrato: 0xf91a4A63b6A503108Ec2D9fD8b3818fD2a1A1E91

contract ExercicioTccGustavov2{

    event EtherRecebido();

    Cliente private cliente;
    ExercicioToken private exercicioToken;

    struct Cliente {
        string nome;
        string sobreNome;
        string agencia;
        string conta;
        address payable endereco; 
    }

    constructor(string memory _nome, string memory _sobreNome, string memory _agencia, string memory _conta) {
        
        //Endereco do token informado na descricao do exercicio
        address enderecoToken = 0x89A2E711b2246B586E51f579676BE2381441A0d0;

        cliente = Cliente(_nome, _sobreNome, _agencia, _conta, payable(address(msg.sender)));
        exercicioToken = ExercicioToken(enderecoToken);

        //Requisito do contrato ter saldo m√≠nimo de 100,00
        gerarTokenParaEuCliente(10000); 
    }

    function meuSaldo() public view returns(uint256) {
        return exercicioToken.balanceOf(address(this));
    }

    function gerarTokenParaEuCliente(uint256 _valor) public returns (bool){
        return exercicioToken.mint(address(this), _valor);
    }


    /*
    ***** Exercicios Plus ******
    */

    /* parte A)*/
    function transferirToken(uint256 _valor, address payable _enderecoRecebedor) public payable {
        require(_valor <= address(this).balance, "saldo insuficiente para operacao");
        _enderecoRecebedor.transfer(_valor);
    }

    /* parte B)*/
    function meuSaldoEther() public view returns(uint256) {
        return address(this).balance;
    }

    /* parte C)*/
    function transferirEther(uint256 _valor, address payable _enderecoDestino) public payable {
        require(_valor <= address(this).balance, "saldo insuficiente para operacao");
        _enderecoDestino.transfer(_valor);        
    }

    receive() external payable {
        emit EtherRecebido();
    }    
  
}
